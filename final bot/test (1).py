from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from pyowm import OWM
from pyowm.utils import timestamps
from pyowm.utils.config import get_default_config
from datetime import datetime, timedelta, timezone
from PIL import Image, ImageDraw, ImageFont, ImageFilter
import pandas as pd
from newsapi import NewsApiClient
from googletrans import Translator
import randfacts
import pytz
import time
import urllib
import sqlite3
import pathlib
import configer
import requests
import base64
import json
from io import BytesIO
from random import randint
import wikipedia, re

# ---------- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ----------
# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ---
def users_settings():
    db = sqlite3.connect('users_settings.db')
    cursor = db.cursor()

    query = """
    CREATE TABLE IF NOT EXISTS users(
        userid INTEGER,
        place TEXT,
        font TEXT NOT NULL DEFAULT "–®—Ä–∏—Ñ—Ç 1",
        link TEXT NOT NULL DEFAULT "https://i.ibb.co/B4SZ8Kp/fon.png",
        fg TEXT NOT NULL DEFAULT "",
        zametka TEXT NOT NULL DEFAULT "–ó–∞–º–µ—Ç–∫–∞ –Ω–∞ –¥–µ–Ω—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        category TEXT NOT NULL DEFAULT "None",
        fact TEXT NOT NULL DEFAULT "–ù–µ—Ç"
    )
    """
    cursor.executescript(query)
users_settings()

# ----- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ -----
bot = Bot(token=configer.token_tg)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
config_dict = get_default_config()
config_dict['language'] = 'ru'
owm = OWM('a01bff19c34db14ebf253e1a3514b7c5', config_dict)
mgr = owm.weather_manager()
wikipedia.set_lang("ru")

# ------ –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π ------
class register(StatesGroup):
    test1 = State()
    test2 = State()
    test3 = State()
    test4 = State()
    test5 = State()
    test6 = State()
    test7 = State()
    test8 = State()
    test9 = State()
# ----- –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ------
# ------- –û–Ω–æ–≤–Ω–∞—è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ -------
item0 = types.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É')
item1 = types.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
item2 = types.KeyboardButton('‚ñ∂ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å')
item3 = types.KeyboardButton('‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
item4 = types.KeyboardButton('üìÑ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
item9 = types.KeyboardButton('üé≤ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª')

markup_start = types.ReplyKeyboardMarkup(resize_keyboard=True).add(item2, item3, item4, item9)

markup_cansel = types.ReplyKeyboardMarkup(resize_keyboard=True).add(item0)

# ------ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ------
item5 = types.KeyboardButton('üó∫ –£–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥')
item7 = types.KeyboardButton('üí¨ –ò–∑–º–µ–Ω–∏—Ç—å —à—Ä–∏—Ñ—Ç')
item8 = types.KeyboardButton('üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω')
item10 = types.KeyboardButton('üì∞ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π')
item11 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç –¥–Ω—è')
item12 = types.KeyboardButton('‚ûñ –£–¥–∞–ª–∏—Ç—å —Ñ–∞–∫—Ç –¥–Ω—è')

markup_settings = types.ReplyKeyboardMarkup(resize_keyboard=True).add(item5, item7, item8, item10, item11, item0)

# ------ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤ ------
city1 = types.KeyboardButton('–ú–æ—Å–∫–≤–∞')
city2 = types.KeyboardButton('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')
city3 = types.KeyboardButton('–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫')
city4 = types.KeyboardButton('–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥')
city5 = types.KeyboardButton('–ö–∞–∑–∞–Ω—å')
city6 = types.KeyboardButton('–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥')
city7 = types.KeyboardButton('–ß–µ–ª—è–±–∏–Ω—Å–∫')
city8 = types.KeyboardButton('–û–º—Å–∫')
city9 = types.KeyboardButton('–°–∞–º–∞—Ä–∞')
city10 = types.KeyboardButton('–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫')
city11 = types.KeyboardButton('–ü–µ—Ä–º—å')
city12 = types.KeyboardButton('–í–æ—Ä–æ–Ω–µ–∂')

markup_cities = types.ReplyKeyboardMarkup(resize_keyboard=True).add(city1, city2, city3, city4, city5, city6, city7,city8, city9, city10, city11, city12, item1)

# ------ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ø —Ñ—É–Ω–∫—Ü–∏–π ------
dlc1 = types.KeyboardButton('üé∞ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ')
dlc2 = types.KeyboardButton('üìÄ –ò–≥—Ä–∞ –≤ "–ú–æ–Ω–µ—Ç–∫—É"')
dlc3 = types.KeyboardButton('üìñ –í–∏–∫–∏–ø–µ–¥–∏—è')

markup_dlc = types.ReplyKeyboardMarkup(resize_keyboard=True).add(dlc1, dlc2, dlc3, item0)

# ------ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —à—Ä–∏—Ñ—Ç–æ–≤ ------
font1 = types.KeyboardButton('–®—Ä–∏—Ñ—Ç 1')
font2 = types.KeyboardButton('–®—Ä–∏—Ñ—Ç 2')
font3 = types.KeyboardButton('–®—Ä–∏—Ñ—Ç 3')
font4 = types.KeyboardButton('–®—Ä–∏—Ñ—Ç 4')
font5 = types.KeyboardButton('–®—Ä–∏—Ñ—Ç 5')
font6 = types.KeyboardButton('–®—Ä–∏—Ñ—Ç 6')
font7 = types.KeyboardButton('–®—Ä–∏—Ñ—Ç 7')
font8 = types.KeyboardButton('–®—Ä–∏—Ñ—Ç 8')
font9 = types.KeyboardButton('–®—Ä–∏—Ñ—Ç 9')

correct_font = ['–®—Ä–∏—Ñ—Ç 1', '–®—Ä–∏—Ñ—Ç 2', '–®—Ä–∏—Ñ—Ç 3', '–®—Ä–∏—Ñ—Ç 4', '–®—Ä–∏—Ñ—Ç 5', '–®—Ä–∏—Ñ—Ç 6', '–®—Ä–∏—Ñ—Ç 7', '–®—Ä–∏—Ñ—Ç 8', '–®—Ä–∏—Ñ—Ç 9', '–®—Ä–∏—Ñ—Ç 10', '–®—Ä–∏—Ñ—Ç 11', '–®—Ä–∏—Ñ—Ç 12']

Comic_CAT = '../TelegramBot/other/Comic_CAT.otf'

output_font = {'–®—Ä–∏—Ñ—Ç 1': Comic_CAT}

def output_font1():
    global font_12
    db = sqlite3.connect('users_settings.db')
    cursor = db.cursor()
    get_font = cursor.execute("SELECT font FROM users WHERE userid = ?", [userid]).fetchone()[0] # —Ç—É—Ç —Å–µ–π—á–∞—Å '–®—Ä–∏—Ñ—Ç 1'
    font_12 = output_font.get(get_font)

    # Comic_Cat = '../TelegramBot/other/Comic_CAT.otf'

markup_fonts = types.ReplyKeyboardMarkup(resize_keyboard=True).add(font1, font2, font3, font4, font5, font6, font7, font8, font9, item1)

# ------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–æ–Ω–æ–≤ -------
markup_backgrounds = types.ReplyKeyboardMarkup(resize_keyboard=True).add(item1)

# ------ –ö–ª–≤–∞–∏–∞—Ç—É—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π ------
news1 = types.KeyboardButton('–ë–∏–∑–Ω–µ—Å')
news2 = types.KeyboardButton('–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è')
news3 = types.KeyboardButton('–ó–¥–æ—Ä–æ–≤—å–µ')
news4 = types.KeyboardButton('–ù–∞—É–∫–∞')
news5 = types.KeyboardButton('–°–ø–æ—Ä—Ç')
news6 = types.KeyboardButton('–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏')
news7 = types.KeyboardButton('–í—ã–≤–æ–¥ –ª—é–±—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π')

correct_news = ['–ë–∏–∑–Ω–µ—Å', '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–ó–¥–æ—Ä–æ–≤—å–µ', '–ù–∞—É–∫–∞', '–°–ø–æ—Ä—Ç', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏']

markup_news = types.ReplyKeyboardMarkup(resize_keyboard=True).add(news1, news2, news3, news4, news5, news6, news7)

# -------- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞ --------
@dp.message_handler(commands=['start'])
async def welcome(message):
    global userid
    userid = message.from_user.id
    db = sqlite3.connect('users_settings.db')
    cursor = db.cursor()
    cursor.execute("SELECT userid FROM users WHERE userid = ?", [userid])
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users(userid) VALUES(?)", [userid])
        db.commit()
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —è .daily Telebot!', reply_markup=markup_start)

# -------- –ù–∞—Å—Ç–∫—Ä–æ–π–∫–∏ –±–æ—Ç–∞ --------
@dp.message_handler(text=['‚ñ∂ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å', '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É',
                    '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç –¥–Ω—è', '‚ûñ –£–¥–∞–ª–∏—Ç—å —Ñ–∞–∫—Ç –¥–Ω—è'], content_types=['photo', 'text'])
async def settings(message: types.Message):
    global markup_settings
    db = sqlite3.connect('users_settings.db')
    cursor = db.cursor()
    proverka = cursor.execute("SELECT fact FROM users WHERE userid = ?", [userid]).fetchone()[0]
    if proverka == '–î–∞':
        markup_settings = types.ReplyKeyboardMarkup(resize_keyboard=True).add(item5, item7, item8, item10, item12, item0)
    else:
        markup_settings = types.ReplyKeyboardMarkup(resize_keyboard=True).add(item5, item7, item8, item10, item11, item0)
    if message.text == '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=markup_settings)
    elif message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ', reply_markup=markup_settings)
    elif message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É":
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É', reply_markup=markup_start)
    elif message.text == "‚ñ∂ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å":
        output_font1()
        start()
        await bot.send_photo(message.chat.id, photo = photo)
        db = sqlite3.connect('users_settings.db')
        cursor = db.cursor()
        cursor.execute("UPDATE users SET zametka = ? WHERE userid = ?", ['–ó–∞–º–µ—Ç–∫–∞ –Ω–∞ –¥–µ–Ω—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', userid])
        db.commit()
    elif message.text == "üì∞ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π":
        await message.answer('–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—É—á–∞–µ–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π', reply_markup=markup_settings)
    elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç –¥–Ω—è":
        markup_settings = types.ReplyKeyboardMarkup(resize_keyboard=True).add(item5, item7, item8, item10, item12, item0)
        await message.answer('–§–∞–∫—Ç –¥–Ω—è –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É', reply_markup=markup_settings)
        db = sqlite3.connect('users_settings.db')
        cursor = db.cursor()
        cursor.execute("UPDATE users SET fact = ? WHERE userid = ?", ['–î–∞', userid])
        db.commit()
    elif message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ñ–∞–∫—Ç –¥–Ω—è":
        markup_settings = types.ReplyKeyboardMarkup(resize_keyboard=True).add(item5, item7, item8, item10, item11, item0)
        await message.answer('–§–∞–∫—Ç –¥–Ω—è —É–¥–∞–ª—ë–Ω —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏', reply_markup=markup_settings)
        db = sqlite3.connect('users_settings.db')
        cursor = db.cursor()
        cursor.execute("UPDATE users SET fact = ? WHERE userid = ?", ['–ù–µ—Ç', userid])
        db.commit()


# -------–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ -------
@dp.message_handler(text=['üìÑ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É'])
async def zametka_register(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –Ω–∞ —Å—É—Ç–∫–∏:', reply_markup=markup_cansel)
    await register.test4.set()

@dp.message_handler(state=register.test4)
async def zametka(message: types.Message, state: FSMContext):
    if message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É':
        await settings(message)
        await state.finish()
    else:
        answer4 = message.text
        await state.update_data(test4=answer4)
        data_zametka = await state.get_data()
        zametka = data_zametka.get('test4')
        if len(zametka) <= 300:
            db = sqlite3.connect('users_settings.db')
            cursor = db.cursor()
            cursor.execute(
                "SELECT userid FROM users WHERE userid = ?", [userid])
            if cursor.fetchone() is None:
                cursor.execute(
                    "INSERT INTO users(zametka) VALUES(?)", [zametka])
                db.commit()
            else:
                cursor.execute("UPDATE users SET zametka = ? WHERE userid = ?", [zametka, userid])
                db.commit()
            await message.answer('–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É', reply_markup=markup_start)
        else:
            await message.answer('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥', reply_markup=markup_start)
        await state.finish()

# ------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ -------
@dp.message_handler(text=['üó∫ –£–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥'])
async def place_register(message: types.Message):
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞', reply_markup=markup_cities)
    await register.test1.set()

@dp.message_handler(state=register.test1)
async def place(message: types.Message, state: FSMContext):
    try:
        if message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
            await settings(message)
            await state.finish()
        else:
            answer1 = message.text
            await state.update_data(test1=answer1)
            data_place = await state.get_data()
            place = data_place.get('test1')
            observation = mgr.weather_at_place(place)
            db = sqlite3.connect('users_settings.db')
            cursor = db.cursor()
            cursor.execute(
                "SELECT userid FROM users WHERE userid = ?", [userid])
            if cursor.fetchone() is None:
                cursor.execute("INSERT INTO users(place) VALUES(?)", [place])
                db.commit()
            else:
                cursor.execute(
                    "UPDATE users SET place = ? WHERE userid = ?", [place, userid])
                db.commit()
            await message.answer('–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ', reply_markup=markup_settings)
            await state.finish()
    except:
        await message.answer('–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ :(', reply_markup = markup_settings)
        await state.finish()

# ------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ -------
@dp.message_handler(text=['üí¨ –ò–∑–º–µ–Ω–∏—Ç—å —à—Ä–∏—Ñ—Ç'])
async def font_register(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ —à—Ä–∏—Ñ—Ç', reply_markup=markup_fonts)
    await register.test3.set()

@dp.message_handler(state=register.test3)
async def font(message: types.Message, state: FSMContext):
    if message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
        await settings(message)
        await state.finish()
    else:
        answer3 = message.text
        if answer3 in correct_font:
            await state.update_data(test3=answer3)
            data_font = await state.get_data()
            font = data_font.get('test3')
            db = sqlite3.connect('users_settings.db')
            cursor = db.cursor()
            cursor.execute("SELECT userid FROM users WHERE userid = ?", [userid])
            if cursor.fetchone() is None:
                cursor.execute("INSERT INTO users(font) VALUES(?)", [font])
                db.commit()
            else:
                cursor.execute("UPDATE users SET font = ? WHERE userid = ?", [font, userid])
                db.commit()
            await message.answer('–®—Ä–∏—Ñ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ', reply_markup=markup_settings)
            await state.finish()
        else:
            await message.answer('–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ :(', reply_markup=markup_settings)
            await state.finish()

# -------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞ --------
@dp.message_handler(text=['üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω'])
async def link_register(message: types.Message):
    await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ–Ω:', reply_markup=markup_backgrounds)
    await register.test5.set()

@dp.message_handler(content_types=['photo', 'text'], state=register.test5)
async def link_save(message: types.Message, state: FSMContext):
    if message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
        await settings(message)
        await state.finish()
    else:
        await state.finish()
        api_key = '4574c73620e082ee4c01b3ad34914cdd'
        file = await bot.get_file(message.photo[-1].file_id)
        await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–Ω–∞...', reply_markup=markup_backgrounds)
        time.sleep(2)
        file_url = f'https://api.telegram.org/file/bot5076830432:AAGWOmMQSFtRj4zTC9uvVBlAXrM9Qve_r14/{file.file_path}'
        url = "https://api.imgbb.com/1/upload"
        payload = {
            "key": api_key,
            "image": file_url,
        }
        res = requests.post(url, payload)
        res = res.json()
        size_width = res['data']['width']
        size_height = res['data']['height']
        if int(size_width) >= 1280 and int(size_height) >= 720:
            link = (res['data']['url'])
            db = sqlite3.connect('users_settings.db')
            cursor = db.cursor()
            cursor.execute("SELECT userid FROM users WHERE userid = ?", [userid])
            if cursor.fetchone() is None:
                cursor.execute("INSERT INTO users(link) VALUES(?)", [link])
                db.commit()
            else:
                cursor.execute("UPDATE users SET link = ? WHERE userid = ?", [link, userid])
                db.commit()
            await message.answer('–§–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ',
                                 reply_markup=markup_settings)
        else:
            await message.answer('–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–æ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', reply_markup=markup_settings)

# -------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ --------
@dp.message_handler(text=['üì∞ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π'])
async def category_register(message: types.Message):
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—É—á–∞–µ–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π', reply_markup=markup_news)
    await register.test6.set()

@dp.message_handler(content_types=['text'], state=register.test6)
async def category_save(message: types.Message, state: FSMContext):
    if message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
        await settings(message)
        await state.finish()
    elif message.text =='–í—ã–≤–æ–¥ –ª—é–±—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π':
        await state.finish()
        db = sqlite3.connect('users_settings.db')
        cursor = db.cursor()
        cursor.execute("UPDATE users SET category = ? WHERE userid = ?", ['None', userid])
        await message.answer('–í—ã–≤–æ–¥ –ª—é–±—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=markup_settings)
        db.commit()
    else:
        answer6 = message.text
        if answer6 in correct_news:
            await state.update_data(test6=answer6)
            data_category = await state.get_data()
            category = data_category.get('test6')
            if category == '–ë–∏–∑–Ω–µ—Å':
                category = 'business'
            if category == '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è':
                category = 'entertainment'
            if category == '–ó–¥–æ—Ä–æ–≤—å–µ':
                category = 'health'
            if category == '–ù–∞—É–∫–∞':
                category = 'science'
            if category == '–°–ø–æ—Ä—Ç':
                category = 'sports'
            if category == '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏':
                category = 'technology'
            db = sqlite3.connect('users_settings.db')
            cursor = db.cursor()
            cursor.execute("SELECT userid FROM users WHERE userid = ?", [userid])
            if cursor.fetchone() is None:
                cursor.execute("INSERT INTO users(category) VALUES(?)", [category])
                db.commit()
            else:
                cursor.execute("UPDATE users SET category = ? WHERE userid = ?", [category, userid])
                db.commit()
            await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=markup_settings)
            await state.finish()
        else:
            await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=markup_settings)
            await state.finish()

# ---- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ----
@dp.message_handler(text=['üé≤ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª'])
async def additional_func(message):
    await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ —á–µ–º —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è', reply_markup=markup_dlc)

@dp.message_handler(text=['üé∞ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ', 'üìÄ –ò–≥—Ä–∞ –≤ "–ú–æ–Ω–µ—Ç–∫—É"', 'üìñ –í–∏–∫–∏–ø–µ–¥–∏—è'])
async def additional_func_choose(message):
    if message.text == 'üé∞ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
        await register.test7.set()
    if message.text == 'üìÄ –ò–≥—Ä–∞ –≤ "–ú–æ–Ω–µ—Ç–∫—É"':
        await message.answer('–ú–æ–Ω–µ—Ç–∫–∞ –≤–∑–ª–µ—Ç–∞–µ—Ç –≤–≤—ã—Å—å...')
        time.sleep(2)
        d = randint(1, 2)
        if d < 2:
            await bot.send_message(message.chat.id, "–í—ã–ø–∞–ª –û—Ä—ë–ª")
        else:
            await bot.send_message(message.chat.id, "–í—ã–ø–∞–ª–∞ –†–µ—à–∫–∞")
    if message.text == 'üìñ –í–∏–∫–∏–ø–µ–¥–∏—è':
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–ª–æ–≤–æ, –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ Wikipedia')
        await register.test9.set()
        def getwiki(s):
            try:
                ny = wikipedia.page(s)
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Ç—ã—Å—è—á—É —Å–∏–º–≤–æ–ª–æ–≤
                wikitext=ny.content[:1000]
                # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–æ—á–∫–∞–º
                wikimas=wikitext.split('.')
                # –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–ï –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏
                wikimas = wikimas[:-1]
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                wikitext2 = ''
                # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º, –≥–¥–µ –Ω–µ—Ç –∑–Ω–∞–∫–æ–≤ ¬´—Ä–∞–≤–Ω–æ¬ª (—Ç–æ –µ—Å—Ç—å –≤—Å–µ, –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
                for x in wikimas:
                    if not('==' in x):
                            # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–æ–ª—å—à–µ —Ç—Ä–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –∫ –Ω–∞—à–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Ç–µ—Ä—è–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫ —Ç–æ—á–∫–∏ –Ω–∞ –º–µ—Å—Ç–æ
                        if(len((x.strip()))>3):
                           wikitext2=wikitext2+x+'.'
                    else:
                        break
                # –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π —É–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
                wikitext2=re.sub('\([^()]*\)', '', wikitext2)
                wikitext2=re.sub('\([^()]*\)', '', wikitext2)
                wikitext2=re.sub('\{[^\{\}]*\}', '', wikitext2)
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                return wikitext2
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å –º–æ–¥—É–ª—å wikipedia –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
            except Exception as e:
                return '–í —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º'
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —é–∑–µ—Ä–∞
        @dp.message_handler(content_types=["text"], state=register.test9)
        async def handle_text(message: types.Message, state: FSMContext):
            await state.finish()
            await bot.send_message(message.chat.id, getwiki(message.text))

@dp.message_handler(content_types=['text'], state=register.test7)
async def random_org_a(message: types.Message, state: FSMContext):
    answer7 = message.text
    await state.update_data(test7=answer7)
    await register.next()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')

@dp.message_handler(content_types=['text'], state=register.test8)
async def random_org_b(message: types.Message, state: FSMContext):
    answer8 = message.text
    await state.update_data(test8=answer8)
    data_a_b = await state.get_data()
    a = int(data_a_b.get('test7'))
    b = int(data_a_b.get('test8'))
    c = randint(a, b)
    await state.finish()
    await bot.send_message(message.chat.id, f"–í–∞—à–µ —á–∏—Å–ª–æ:  {c}")

# ---------- –ú–æ–∑–≥ –±–æ—Ç–∞ ----------
def start():
    global bg
    db = sqlite3.connect('users_settings.db')
    cursor = db.cursor()
    url_im = cursor.execute("SELECT link FROM users WHERE userid = ?", [userid]).fetchone()[0]  # –¢—É—Ç –ª–µ–∂–∏—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ–Ω
    resp = requests.get(url_im, stream=True).raw
    bg = Image.open(resp)  # –í—Å—Ç–∞–≤–∫–∞ —Ñ–æ–Ω–∞

    fg = Image.open('../TelegramBot/other/fgg.png').resize((1280, 800), Image.ANTIALIAS)  # –í—Å—Ç–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞

    bg = bg.resize((1280, 800))
    # –í—ã–≤–æ–¥ –ø–æ–≥–æ–¥—ã

    def main():
        global photo
        def weather_1():
            config_dict = get_default_config()
            config_dict['language'] = 'ru'

            db = sqlite3.connect('users_settings.db')
            cursor = db.cursor()
            place = cursor.execute("SELECT place FROM users WHERE userid = ?", [userid]).fetchone()[0]
            owm = OWM(configer.token_pyow, config_dict)
            mgr = owm.weather_manager()
            observation = mgr.weather_at_place(place)
            w = observation.weather

            t = w.temperature("celsius")
            t1 = t['temp']
            t2 = t['feels_like']
            t3 = t['temp_max']
            t4 = t['temp_min']

            wi = w.wind()['speed']
            humi = w.humidity
            cl = w.clouds
            st = w.status
            dt = w.detailed_status
            ti = w.reference_time('iso')
            pr = w.pressure['press']
            vd = w.visibility_distance

            a = "–í –≥–æ—Ä–æ–¥–µ " + str(place) + " —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–µ–π—á–∞—Å " + str(t1) + " ¬∞C" + "\n\n"
            a += "–û—â—Ü—â–∞–µ—Ç—Å—è –∫–∞–∫" + str(t2) + " ¬∞C" + "\n\n"
            a += "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ " + str(wi) + " –º/—Å" + "\n\n"
            a += "–î–∞–≤–ª–µ–Ω–∏–µ " + str(pr) + " –º–º.—Ä—Ç.—Å—Ç" + "\n\n"
            a += "–í–ª–∞–∂–Ω–æ—Å—Ç—å " + str(humi) + " %" + "\n\n"
            a += "–û–ø–∏—Å–∞–Ω–∏–µ: " + str(dt) + "\n\n"

            pogoda = a
            font = ImageFont.truetype(font_12, size=28)
            draw_text = ImageDraw.Draw(bg)
            draw_text.text((50, 300), pogoda, font=font, fill='#ffffff')

        # –í—ã–≤–æ–¥ –¥–∞—Ç—ã
        def date_1():
            tz = timezone(timedelta(days=0))
            current_date = datetime.now(tz=tz).strftime("%d/%m/%Y")
            data = current_date
            font = ImageFont.truetype(font_12, size=36) # '../TelegramBot/other/Comic_CAT.otf'
            draw_text = ImageDraw.Draw(bg)
            draw_text.text((50, 50), data, font=font, fill='#ffffff')
        # –í—ã–≤–æ–¥ –∫—É—Ä—Å–∞

        def exchange_rate_1():
            # –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∞–ª—é—Ç
            dollar = "USD"
            euro = "EUR"
            rubl = "RUB"
            # —Ç–æ–∫–µ–Ω —Å–∞–π—Ç–∞ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–¥—ë—Ç –∫—É—Ä—Å
            access_key = configer.token_money
            # –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            res_d = requests.get("https://openexchangerates.org/api/latest.json?app_id=" + access_key,
                                 params={"base": "USD", "symbols": dollar})
            res_r = requests.get("https://openexchangerates.org/api/latest.json?app_id=" + access_key,
                                 params={"base": "USD", "symbols": rubl})
            res_e = requests.get("https://openexchangerates.org/api/latest.json?app_id=" + access_key,
                                 params={"base": "USD", "symbols": euro})

            if res_d.status_code != 200 or res_r.status_code != 200 or res_e.status_code != 200:
                raise Exception("ERROR: API request unsuccessful.")
            # —Å—á—ë—Ç –≤–∞–ª—é—Ç
            data_d = res_d.json()
            data_r = res_r.json()
            data_e = res_e.json()

            rate_d = data_d["rates"][dollar]
            rate_r = data_r["rates"][rubl]
            rate_e = data_e["rates"][euro]
            rate = round((rate_r / rate_d), 2)
            rate1 = round((rate_r / rate_e), 2)

            x = (f"{dollar} = {rate} {rubl}")
            y = (f"{euro} = {rate1} {rubl}")
            kurs = x + '\n' + y

            font = ImageFont.truetype(font_12, size=28)
            draw_text = ImageDraw.Draw(bg)
            draw_text.text((50, 800), kurs, font=font, fill='#ffffff')
        # –í—ã–≤–æ–¥ –∑–∞–º–µ—Ç–∫–∏ –Ω–∞ –¥–µ–Ω—å

        def note_1():
            zametka_text = '–ó–∞–º–µ—Ç–∫–∞: '
            font = ImageFont.truetype(font_12, size=36)
            draw_text = ImageDraw.Draw(bg)
            draw_text.text((1200, 50), zametka_text, font=font, fill='#ffffff')

        def note_2():
            db = sqlite3.connect('users_settings.db')
            cursor = db.cursor()
            zam = cursor.execute("SELECT zametka FROM users WHERE userid = ?", [userid]).fetchone()[0]
            zametka = zam[0:30] + "\n\n"
            zametka += zam[30:60] + "\n\n"
            zametka += zam[60:90] + "\n\n"
            zametka += zam[90:120] + "\n\n"
            zametka += zam[120:150] + "\n\n"
            zametka += zam[150:180] + "\n\n"
            zametka += zam[180:210] + "\n\n"
            zametka += zam[210:240] + "\n\n"
            zametka += zam[240:270] + "\n\n"
            zametka += zam[270:300] + "\n\n"

            font = ImageFont.truetype(font_12, size=28)
            draw_text = ImageDraw.Draw(bg)
            draw_text.text((1000, 125), zametka, font=font, fill='#ffffff')

        def news_1():
            a = ""
            newsapi = NewsApiClient(api_key=configer.token_newsss)
            category_2 = cursor.execute("SELECT category FROM users WHERE userid = ?", [userid]).fetchone()[0]
            if category_2 == 'None':
                data = newsapi.get_top_headlines(language='ru', country="ru", page_size=5)
                articles = data["articles"]
                for y in articles:
                    y = f"{y['title']}"
                    a += f"{y}\n"

                    font = ImageFont.truetype(font_12, size=15)
                    draw_text = ImageDraw.Draw(bg)
                    draw_text.text((100, 160), a, font=font, fill='#ffffff')
            elif category_2 != 'None':
                data = newsapi.get_top_headlines(language='ru', country="ru", page_size=5, category = category_2)
                articles = data["articles"]
                for y in articles:
                    y = f"{y['title']}"
                    a += f"{y}\n"

                    font = ImageFont.truetype(font_12, size=15)
                    draw_text = ImageDraw.Draw(bg)
                    draw_text.text((100, 160), a, font=font, fill='#ffffff')

        def fact_day_1():
            db = sqlite3.connect('users_settings.db')
            cursor = db.cursor()
            fact = cursor.execute("SELECT fact FROM users WHERE userid = ?", [userid]).fetchone()[0]
            if fact == '–î–∞':
                translator = Translator()
                x = randfacts.get_fact()
                a = translator.translate(x, dest='ru')
                b = a.text
                font = ImageFont.truetype(font_12, size=15)
                draw_text = ImageDraw.Draw(bg)
                draw_text.text((50, 700), b, font=font, fill='#ffffff')
            elif fact == '–ù–µ—Ç':
                return
        weather_1()
        date_1()
        exchange_rate_1()
        note_1()
        note_2()
        news_1()
        fact_day_1()
        photo = BytesIO()
        photo.result = bg.paste(fg, mask=fg)
        bg.save(photo, 'PNG')
        photo.seek(0)
    main()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True) # on_startup=on_startup skip_updates=True
